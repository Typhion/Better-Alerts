# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types decisions_typhion_types
{
	### DECISION
	type decision = container {
		maximumsize = { @panel_width_minus_10 -1 }
		minimumsize = { @panel_width_minus_10 -1 }
		
		flowcontainer = {
			margin = { 20 10 }
			direction = vertical 

			textbox = {
				text = "[Decision.GetName]"
				autoresize = yes
				align = left|nobaseline
				using = fontsize_large
				multiline = yes
				maximumsize = { 420 -1 }
				minimumsize = { 420 -1 }
				default_format = "#header"
			}

			textbox = {
				text = "[Decision.GetDesc]"
				autoresize = yes
				align = left|nobaseline
				multiline = yes
				maximumsize = { 420 -1 }
				minimumsize = { 420 -1 }
			}
		}
		
		flowcontainer = {
			parentanchor = right|vcenter

			button_icon_check_disabled_alert = {
				parentanchor = left|vcenter
				size = { 50 50 }
				onrightclick = "[GetVariableSystem.Toggle(Concatenate('decision_toggle_', Decision.GetTooltipTag))]"
				texture = "gfx/interface/buttons/round_button_small_wood_action_yellow.dds"
				tooltip = "[Decision.GetTooltip( GetPlayer )]"
				enabled = "[IsValid( Decision.TakeDecision( GetPlayer ) )]"
				onclick = "[Execute( Decision.TakeDecision( GetPlayer ) )]"
			}

			#button_checkbox_label_custom = {
			#	parentanchor = right|vcenter
			#	size = { 15 15 }
			#	using = tooltip_above
			#	onclick = "[GetVariableSystem.Toggle(Concatenate('decision_toggle_', Decision.GetTooltipTag))]"
	#
			#	blockoverride "checkbox"
			#	{
			#		checked = "[Not(GetVariableSystem.Exists(Concatenate('decision_toggle_', Decision.GetTooltipTag)))]"
			#	}
	#
			#	blockoverride "text" { text = "" }
			#	tooltip = "TOGGLE_DECISION_TOOLTIP"
			#}
		}
		
		divider_clean = {
			parentanchor = bottom
		}
	}

	type button_icon_round_action_disabled_alert = button_icon_round
	{
		blockoverride "wood_texture" {
			visible = "[Not(GetVariableSystem.Exists(Concatenate('decision_toggle_', Decision.GetTooltipTag)))]"
			texture = "gfx/interface/buttons/round_button_small_wood_action.dds"
		}
		blockoverride "wood_texture_yellow" {
			visible = "[GetVariableSystem.Exists(Concatenate('decision_toggle_', Decision.GetTooltipTag))]"
			texture = "gfx/interface/buttons/round_button_small_wood_action_yellow.dds"
		}
		blockoverride "frame_visible" {}
	}

	type button_icon_check_disabled_alert = button_icon_round_action_disabled_alert
	{
		blockoverride "icon" {
			texture = "gfx/interface/buttons/button_icons/check.dds"
		}
	}
}