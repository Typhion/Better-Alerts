types custom_alert_types {

	type button_checkbox_label_custom = button_group {
		using = tooltip_se
		block "sound" {
			using = check_button_sound
		}
		flowcontainer = {
			spacing = 2
			checkbutton = {
				texture = "gfx/interface/buttons/check_button.dds"
				framesize = { 80 80 }
				size = { 25 25 }
				block "checkbox" {
				}
			}
			textbox = {
				using = Font_Type_Standard
				fontsize = 14
				autoresize = yes
				elide = right
				block "text" {
					text = "DEFAULT TEXT"
				}
				default_format = "#clickable"
				alwaystransparent = no
				text_selectable = no
				parentanchor = vcenter
				align = nobaseline
			}
		}
	}

	type custom_alert_toggle_menu = right_click_menu_widget {
		visible = "[GetVariableSystem.Exists('alert_toggle_menu')]"
		gfxtype = windowgfx
		shaderfile = "gfx/FX/pdxgui_default.shader"
		widgetanchor = top|left
		movable = no
		layer = layer_rightclickmenu
		size = { 525 120 }
		state = {
			name = sound
			trigger_on_create = yes
			start_sound = {
				using = ui_sfx_global_panel_show
			}
		}
		background = {
			using = default_background
		}
		background = {
			using = frame_small
		}
		# hidden button to close the menu
		#button = {
		#	size = { 0 0 }
		#	onclick = "[GetVariableSystem.Toggle('alert_toggle_menu')]"
		#	shortcut = "close_window"
		#	using = ui_close
		#}
		DEM_scrollbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			blockoverride "area_size" {
				size = { 512 106 }
				position = { 5 7 }
			}
			blockoverride "scrollbox_replace_vbox" {
				flowcontainer = {
					spacing = 2
					position = { 0 5 }
					flowcontainer = {
						spacing = 1
						direction = vertical
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('diplo_play_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('diplo_play_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('diplo_play_toggle'))]"
							}

							blockoverride "text" { raw_text = "Diplo Plays" }
							tooltip = "DIPLO_PLAY_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('isolated_state_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('isolated_state_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('isolated_state_toggle'))]"
							}

							blockoverride "text" { raw_text = "Isolated States" }
							tooltip = "ISOLATED_STATES_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('unproductive_trade_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('unproductive_trade_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('unproductive_trade_toggle'))]"
							}

							blockoverride "text" { raw_text = "Trade Routes" }
							tooltip = "UNPRODUCTIVE_TRADE_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('upcoming_revolt_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('upcoming_revolt_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('upcoming_revolt_toggle'))]"
							}

							blockoverride "text" { raw_text = "Revolution" }
							tooltip = "UPCOMING_REVOLT_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('wasted_construction_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('wasted_construction_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('wasted_construction_toggle'))]"
							}

							blockoverride "text" { raw_text = "Construction" }
							tooltip = "WASTED_CONSTRUCTION_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('has_convoys_being_sunk_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('has_convoys_being_sunk_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('has_convoys_being_sunk_toggle'))]"
							}

							blockoverride "text" { raw_text = "Convoys Sunk" }
							tooltip = "CONVOYS_SUNK_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('high_attrition_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('high_attrition_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('high_attrition_toggle'))]"
							}

							blockoverride "text" { raw_text = "Convoys Sunk" }
							tooltip = "HIGH_ATTRITION_ALERT_TOGGLE"
						}
					}
					flowcontainer = {
						position = { 5 5 }
						spacing = 1
						direction = vertical
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('idle_general_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('idle_gen_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('idle_gen_toggle'))]"
							}

							blockoverride "text" { raw_text = "Idle Commander" }
							tooltip = "IDLE_GENERAL_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('needs_convoys_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('need_convoys_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('need_convoys_toggle'))]"
							}

							blockoverride "text" { raw_text = "Need Convoys" }
							tooltip = "NEED_CONVOYS_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('low_market_access_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('low_market_access_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('low_market_access_toggle'))]"
							}

							blockoverride "text" { raw_text = "Low Access" }
							tooltip = "LOW_ACCESS_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('has_insufficient_tax_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('bad_tax_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('bad_tax_toggle'))]"
							}

							blockoverride "text" { raw_text = "Tax Capacity" }
							tooltip = "BAD_TAX_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('stockpiling_gold_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('stockpiling_gold_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('stockpiling_gold_toggle'))]"
							}

							blockoverride "text" { raw_text = "Gold Stockpile" }
							tooltip = "STOCKPILING_GOLD_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('low_legitimacy_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('low_legitimacy_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('low_legitimacy_toggle'))]"
							}

							blockoverride "text" { raw_text = "Low Legitimacy" }
							tooltip = "LOW_LEGITIMACY_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('available_decisions_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('available_decisions_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('available_decisions_toggle'))]"
							}

							blockoverride "text" { raw_text = "Decisions" }
							tooltip = "TOGGLE_DECISIONS_TOOLTIP"
						}
					}
					flowcontainer = {
						position = { 5 5 }
						spacing = 1
						direction = vertical
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('market_shortage_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('market_shortage_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('market_shortage_toggle'))]"
							}

							blockoverride "text" { raw_text = "Market Shortage" }
							tooltip = "MARKET_SHORTAGE_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('army_reserve_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('army_reserve_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('army_reserve_toggle'))]"
							}

							blockoverride "text" { raw_text = "Army Reserve" }
							tooltip = "ARMY_RESERVE_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('navy_reserve_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('navy_reserve_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('navy_reserve_toggle'))]"
							}

							blockoverride "text" { raw_text = "Navy Reserve" }
							tooltip = "NAVY_RESERVE_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('secession_growing_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('secession_growing_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('secession_growing_toggle'))]"
							}

							blockoverride "text" { raw_text = "Secession Growing" }
							tooltip = "SECESSION_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('country_default_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('country_default_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('country_default_toggle'))]"
							}

							blockoverride "text" { raw_text = "Country Default" }
							tooltip = "COUNTRY_DEFAULT_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('has_no_research_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('no_research_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('no_research_toggle'))]"
							}

							blockoverride "text" { raw_text = "Research" }
							tooltip = "HAS_NO_RESEARCH_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('active_peace_deal_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('active_peace_deal_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('active_peace_deal_toggle'))]"
							}

							blockoverride "text" { raw_text = "Active Peace" }
							tooltip = "ACTIVE_PEACE_DEAL_ALERT_TOGGLE"
						}
					}
					flowcontainer = {
						position = { 5 5 }
						spacing = 1
						direction = vertical
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('decreasing_interests_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('decreasing_interests_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('decreasing_interests_toggle'))]"
							}

							blockoverride "text" { raw_text = "Decreasing Interests" }
							tooltip = "DESCREASING_INTERESTS_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('bureaucracy_shortage_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('bureaucracy_shortage_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('bureaucracy_shortage_toggle'))]"
							}

							blockoverride "text" { raw_text = "Low Bureaucracy" }
							tooltip = "BUREAUCRACY_SHORTAGE_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('government_reform_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('government_reform_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('government_reform_toggle'))]"
							}

							blockoverride "text" { raw_text = "Free Gov Reform" }
							tooltip = "GOV_REFORM_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('losing_rank_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('losing_rank_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('losing_rank_toggle'))]"
							}

							blockoverride "text" { raw_text = "Losing Rank" }
							tooltip = "LOSING_RANK_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('has_no_war_goal_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('no_war_goal_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('no_war_goal_toggle'))]"
							}

							blockoverride "text" { raw_text = "No War Goal" }
							tooltip = "HAS_NO_WAR_GOAL_ALERT_TOGGLE"
						}
						button_checkbox_label_custom = {
							onclick = "[GetScriptedGui('vulnerable_front_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
							onclick = "[GetVariableSystem.Toggle('vulnerable_front_toggle')]"

							blockoverride "checkbox"
							{
								checked = "[Not(GetVariableSystem.Exists('vulnerable_front_toggle'))]"
							}

							blockoverride "text" { raw_text = "Vulnerable Front" }
							tooltip = "VULNERABLE_FRONT_ALERT_TOGGLE"
						}
					}
				}
			}
		}
	}
	# Generic widget for states that are effected by an alert
	type alert_state_widget = right_click_menu_widget {
		# PARAMETERS:
		# A visible trigger
		# The 'item_visibility' blockoverride with a visible trigger

		#visible = "[GetVariableSystem.Exists('alert_toggle_menu')]"
		gfxtype = windowgfx
		shaderfile = "gfx/FX/pdxgui_default.shader"
		widgetanchor = top|left
		movable = no
		layer = layer_rightclickmenu
		size = { 250 125 }
		state = {
			name = sound
			trigger_on_create = yes
			start_sound = {
				using = ui_sfx_global_panel_show
			}
		}
		background = {
			using = default_background
		}
		background = {
			using = frame_small
		}
		textbox = {
			position = { -10 0 }
			size = { 75% 40 }
			block "header_text" 
			{
				#text = "Isolated States"
			}
			elide = right
			fontsize_min = 14
			parentanchor = hcenter
			align = center|nobaseline
			using = header_font
			fontsize = 20
			default_format = "#header"
		}
		DEM_scrollbox = {
			blockoverride "area_size" {
				position = { 5 45 }
				size = { 230 70 }
			}

			blockoverride "scrollbox_background" {

			}
			blockoverride "scrollbox_replace_vbox" {
				dynamicgridbox = {
					position = { 5 0 }
					block "data" {}
					datamodel = "[AccessPlayer.AccessStates]"
					datamodel_wrap = 1
					flipdirection = yes
					ignoreinvisible = yes
					item = {
						button = {
							parentanchor = top|center
							block "item_visibility" {
								#visible = "[EqualTo_string(GetPlayer.GetCustom('has_isolated_state_loc'), 'yes')]"
							}
							using = default_button_action
							size = { 210 35 }
							onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
							onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
							onclick = "[InformationPanelBar.OpenStatePanel( State.AccessSelf )]"
							onclick = "[State.ZoomToCapital]"
							onrightclick = "[RightClickMenuManager.ShowForState(State.AccessSelf)]"
							textbox = {
								using = Font_Type_Standard
								fontsize = 16
								autoresize = yes
								elide = right
								raw_text = "#bold [State.GetNameNoFormatting]#!"
								max_width = 140
								default_format = "#clickable"
								alwaystransparent = yes
								parentanchor = center
								align = nobaseline
								tooltipwidget = {
									FancyTooltip_State = {}
								}
							}
						}
					}
				}
			}
		}
		close_button = {
			name = "Close"
			size = { 35 35 }
			parentanchor = right|top
			position = { -5 5 }
			shortcut = "close_window"
			onclick = "[GetVariableSystem.Toggle('state_alert_var')]"
			block "onclose" {}
		}
	}
	type alert_general_widget = right_click_menu_widget {
		# PARAMETERS:
		# A visible trigger
		# The 'item_visibility' blockoverride with a visible trigger

		#visible = "[GetVariableSystem.Exists('alert_toggle_menu')]"
		gfxtype = windowgfx
		shaderfile = "gfx/FX/pdxgui_default.shader"
		widgetanchor = top|left
		movable = no
		layer = layer_rightclickmenu
		size = { 250 125 }
		state = {
			name = sound
			trigger_on_create = yes
			start_sound = {
				using = ui_sfx_global_panel_show
			}
		}
		background = {
			using = default_background
		}
		background = {
			using = frame_small
		}
		textbox = {
			position = { -10 0 }
			size = { 75% 40 }
			block "header_text" 
			{
				#raw_text = "Isolated States"
			}
			elide = right
			fontsize_min = 14
			parentanchor = hcenter
			align = center|nobaseline
			using = header_font
			fontsize = 20
			default_format = "#header"
		}
		DEM_scrollbox = {
			blockoverride "area_size" {
				position = { 5 45 }
				size = { 230 70 }
			}

			blockoverride "scrollbox_background" {

			}
			blockoverride "scrollbox_replace_vbox" {
				dynamicgridbox = {
					position = { 5 0 }
					block "data" {
						#datamodel = "[GetGlobalList('idle_general_list')]"
					}
					datamodel_wrap = 1
					flipdirection = yes
					ignoreinvisible = yes
					item = {
						button = {
							datacontext = "[Scope.AccessCharacter]"
							parentanchor = top|center
							block "item_visibility" {
								#visible = "[EqualTo_string(GetPlayer.GetCustom('has_isolated_state_loc'), 'yes')]"
							}
							using = default_button_action
							size = { 210 35 }
							onmousehierarchyenter = "[AccessHighlightManager.HighlightCharacter( Character.Self )]"
							onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
							onclick = "[InformationPanelBar.OpenCommanderPanel( Character.AccessSelf )]"
							onrightclick = "[RightClickMenuManager.ShowForCharacter(Character.AccessSelf)]"
							flowcontainer = {
								parentanchor = left|vcenter
								margin = { 10 10 }
								character_portrait_mini = {}
				
								widget = {
									size = { 5 5 }
								}
							}
							textbox = {
								using = Font_Type_Standard
								fontsize = 16
								autoresize = yes
								elide = right
								raw_text = "[Scope.GetCharacter.GetFullName]"
								max_width = 140
								default_format = "#clickable"
								alwaystransparent = yes
								parentanchor = center
								align = nobaseline
								margin = { 10 10 }
								tooltipwidget = {
									FancyTooltip_Character = {}
								}
							}
						}
					}
				}
			}
		}
		close_button = {
			name = "Close"
			size = { 35 35 }
			parentanchor = right|top
			position = { -5 5 }
			shortcut = "close_window"
			onclick = "[GetVariableSystem.Toggle('state_alert_var')]"
			block "onclick_close_button" {
				#onclick = "[GetScriptedGui('toggle_idle_general_list_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
			}
			block "onclose" {}
		}
	}
	#type alert_front_widget = right_click_menu_widget {
	#	# PARAMETERS:
	#	# A visible trigger
	#	# The 'item_visibility' blockoverride with a visible trigger
#
	#	#visible = "[GetVariableSystem.Exists('alert_toggle_menu')]"
	#	gfxtype = windowgfx
	#	shaderfile = "gfx/FX/pdxgui_default.shader"
	#	widgetanchor = top|left
	#	movable = no
	#	layer = layer_rightclickmenu
	#	size = { 250 125 }
	#	state = {
	#		name = sound
	#		trigger_on_create = yes
	#		start_sound = {
	#			using = ui_sfx_global_panel_show
	#		}
	#	}
	#	background = {
	#		using = default_background
	#	}
	#	background = {
	#		using = frame_small
	#	}
	#	textbox = {
	#		position = { -10 0 }
	#		size = { 75% 40 }
	#		block "header_text" 
	#		{
	#			#raw_text = "Isolated States"
	#		}
	#		elide = right
	#		fontsize_min = 14
	#		parentanchor = hcenter
	#		align = center|nobaseline
	#		using = header_font
	#		fontsize = 20
	#		default_format = "#header"
	#	}
	#	DEM_scrollbox = {
	#		blockoverride "area_size" {
	#			position = { 5 45 }
	#			size = { 230 70 }
	#		}
#
	#		blockoverride "scrollbox_background" {
#
	#		}
	#		blockoverride "scrollbox_replace_vbox" {
	#			dynamicgridbox = {
	#				position = { 5 0 }
	#				block "data" {}
	#				datamodel = "[GetGlobalList('vulnerable_front_list')]"
	#				datamodel_wrap = 1
	#				flipdirection = yes
	#				ignoreinvisible = yes
	#				item = {
	#					button = {
	#						datacontext = "[Scope.AccessFront]"
	#						parentanchor = top|center
	#						block "item_visibility" {
	#							#visible = "[EqualTo_string(GetPlayer.GetCustom('has_isolated_state_loc'), 'yes')]"
	#						}
	#						using = default_button_action
	#						size = { 210 35 }
	#						onmousehierarchyenter = "[AccessHighlightManager.HighlightFront(Front.Self)]"
	#						onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	#						onclick = "[InformationPanelBar.OpenFrontPanel( Front.AccessSelf )]"
	#						textbox = {
	#							using = Font_Type_Standard
	#							fontsize = 16
	#							autoresize = yes
	#							elide = right
	#							raw_text = "#bold [Front.GetNameNoFormatting]#!"
	#							max_width = 140
	#							default_format = "#clickable"
	#							alwaystransparent = yes
	#							parentanchor = center
	#							align = nobaseline
	#							tooltipwidget = {
	#								FancyTooltip_Front = {}
	#							}
	#						}
	#					}
	#				}
	#			}
	#		}
	#	}
	#	close_button = {
	#		name = "Close"
	#		size = { 35 35 }
	#		parentanchor = right|top
	#		position = { -5 5 }
	#		shortcut = "close_window"
	#		onclick = "[GetVariableSystem.Toggle('state_alert_var')]"
	#		onclick = "[GetScriptedGui('toggle_vulnerable_front_list_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
	#		block "onclose" {}
	#	}
	#}
	type alert_diplo_play_widget = right_click_menu_widget {
		# PARAMETERS:
		# A visible trigger
		# The 'item_visibility' blockoverride with a visible trigger

		#visible = "[GetVariableSystem.Exists('alert_toggle_menu')]"
		gfxtype = windowgfx
		shaderfile = "gfx/FX/pdxgui_default.shader"
		widgetanchor = top|left
		movable = no
		layer = layer_rightclickmenu
		size = { 250 125 }
		state = {
			name = sound
			trigger_on_create = yes
			start_sound = {
				using = ui_sfx_global_panel_show
			}
		}
		background = {
			using = default_background
		}
		background = {
			using = frame_small
		}
		textbox = {
			position = { -10 0 }
			size = { 75% 40 }
			block "header_text" 
			{
				#raw_text = "Isolated States"
			}
			elide = right
			fontsize_min = 14
			parentanchor = hcenter
			align = center|nobaseline
			using = header_font
			fontsize = 20
			default_format = "#header"
		}
		DEM_scrollbox = {
			blockoverride "area_size" {
				position = { 5 45 }
				size = { 230 70 }
			}

			blockoverride "scrollbox_background" {

			}
			blockoverride "scrollbox_replace_vbox" {
				dynamicgridbox = {
					position = { 5 0 }
					datamodel = "[AccessPlayer.AccessActiveDiplomaticPlays]"
					datamodel_wrap = 1
					flipdirection = yes
					ignoreinvisible = yes
					item = {
						button = {
							datacontext = "[Scope.AccessDiplomaticPlay]"
							tooltip = "DIPLOMATIC_PLAY_OUTLINER_TOOLTIP"
							parentanchor = top|center
							block "item_visibility" {
								#visible = "[EqualTo_string(GetPlayer.GetCustom('has_isolated_state_loc'), 'yes')]"
							}
							using = default_button_action
							size = { 210 35 }
							onclick = "[InformationPanelBar.OpenDiplomaticPlayPanel( DiplomaticPlay.AccessSelf )]"
							#onrightclick = "[RightClickMenuManager.ShowForDiplomaticPlay(DiplomaticPlay.AccessSelf)]"
							
							### left side
							flowcontainer = {
								datacontext = "[DiplomaticPlay.GetInitiator]"
								parentanchor = vcenter|left
								position = { 10 0 }
								spacing = 5
								
								tiny_flag_no_interact = {
									parentanchor = vcenter
								}
							}
							textbox = {
								datacontext = "[DiplomaticPlay.GetInitiator]"
								using = Font_Type_Standard
								fontsize = 16
								autoresize = yes
								elide = right
								raw_text = "[DiplomaticPlay.GetInitiator.GetNameNoFlag] vs. [DiplomaticPlay.GetTarget.GetNameNoFlag]"
								max_width = 140
								default_format = "#clickable"
								alwaystransparent = yes
								parentanchor = center
								align = nobaseline
								margin = { 10 10 }
							}
							### right side side
							flowcontainer = {
								datacontext = "[DiplomaticPlay.GetTarget]"
								parentanchor = vcenter|right
								position = { -10 0 }
								spacing = 5
								
								tiny_flag_no_interact = {
									parentanchor = vcenter
								}
							}
						}
					}
				}
			}
		}
		close_button = {
			name = "Close"
			size = { 35 35 }
			parentanchor = right|top
			position = { -5 5 }
			shortcut = "close_window"
			onclick = "[GetVariableSystem.Toggle('state_alert_var')]"
			block "onclose" {}
		}
	}
	type alert_revolution_widget = right_click_menu_widget {
		# PARAMETERS:
		# A visible trigger
		# The 'item_visibility' blockoverride with a visible trigger

		#visible = "[GetVariableSystem.Exists('alert_toggle_menu')]"
		gfxtype = windowgfx
		shaderfile = "gfx/FX/pdxgui_default.shader"
		widgetanchor = top|left
		movable = no
		layer = layer_rightclickmenu
		size = { 250 125 }
		state = {
			name = sound
			trigger_on_create = yes
			start_sound = {
				using = ui_sfx_global_panel_show
			}
		}
		background = {
			using = default_background
		}
		background = {
			using = frame_small
		}
		textbox = {
			position = { -10 0 }
			size = { 75% 40 }
			block "header_text" 
			{
				#raw_text = "Isolated States"
			}
			elide = right
			fontsize_min = 14
			parentanchor = hcenter
			align = center|nobaseline
			using = header_font
			fontsize = 20
			default_format = "#header"
		}
		DEM_scrollbox = {
			blockoverride "area_size" {
				position = { 5 45 }
				size = { 230 70 }
			}

			blockoverride "scrollbox_background" {

			}
			blockoverride "scrollbox_replace_vbox" {
				dynamicgridbox = {
					position = { 5 0 }
					block "data" {
						#datamodel = "[GetGlobalList('idle_general_list')]"
					}
					datamodel_wrap = 1
					flipdirection = yes
					ignoreinvisible = yes
					#direction = vertical
					#spacing = 2
					item = {
						flowcontainer = {
							direction = vertical
							alwaystransparent = no
							#datacontext = "[Scope.AccessCivilWars]"
							parentanchor = top|center
							block "item_visibility" {
								visible = "[Not( CivilWar.HasBrokenOut )]"
							}
							size = { 220 35 }
							spacing = 6
							onmousehierarchyenter = "[AccessHighlightManager.HighlightCivilWarCountry( CivilWar.Self )]"
							onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

							bad_progressbar_horizontal = {
								visible = "[And(CivilWar.IsRevolution, CivilWar.HasPoliticalMovement)]"
								size = { 220 30 }
								tooltip = "REVOLUTIONS_PROGRESS_TOOLTIP"
			
								blockoverride "values" {
									value = "[FixedPointToFloat( CivilWar.GetProgress )]"
									min = 0
									max = 1
								}
			
								flowcontainer = {
									parentanchor = vcenter
									margin_left = 10
									spacing = 7
									dynamicgridbox = {
										datamodel = "[CivilWar.AccessInsurrectionaryIGs( GetPlayer.Self )]"
										flipdirection = yes
										item = {
											ig_button = {
												size = { 23 23 }
											}
										}
									}
									### revolution header
									textbox = {
										text = "REVOLUTIONS_HEADER"
										tooltip = "REVOLUTIONS_HEADER_TOOLTIP"
										align = nobaseline
										autoresize = yes
									}
								}
			
								textbox = {
									text = "[CivilWar.GetProgress|%0v]"
									autoresize = yes
									align = nobaseline
									parentanchor = right|vcenter
									margin_right = 35
								}
								
								blockoverride "in_government_icon"{}
			
								icon = {
									parentanchor = right|vcenter
									size = { 25 25 }
									texture = "gfx/interface/icons/politics_icons/radicalized.dds"
									position = { -5 0 }
								}
							}
						}
					}
				}
			}
		}
		close_button = {
			name = "Close"
			size = { 35 35 }
			parentanchor = right|top
			position = { -5 5 }
			shortcut = "close_window"
			onclick = "[GetVariableSystem.Toggle('state_alert_var')]"
			block "onclick_close_button" {
				#onclick = "[GetScriptedGui('toggle_idle_general_list_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
			}
			block "onclose" {}
		}
	}
	type alert_secession_widget = right_click_menu_widget {
		# PARAMETERS:
		# A visible trigger
		# The 'item_visibility' blockoverride with a visible trigger

		#visible = "[GetVariableSystem.Exists('alert_toggle_menu')]"
		gfxtype = windowgfx
		shaderfile = "gfx/FX/pdxgui_default.shader"
		widgetanchor = top|left
		movable = no
		layer = layer_rightclickmenu
		size = { 250 125 }
		state = {
			name = sound
			trigger_on_create = yes
			start_sound = {
				using = ui_sfx_global_panel_show
			}
		}
		background = {
			using = default_background
		}
		background = {
			using = frame_small
		}
		textbox = {
			position = { -10 0 }
			size = { 75% 40 }
			block "header_text" 
			{
				#raw_text = "Isolated States"
			}
			elide = right
			fontsize_min = 14
			parentanchor = hcenter
			align = center|nobaseline
			using = header_font
			fontsize = 20
			default_format = "#header"
		}
		DEM_scrollbox = {
			blockoverride "area_size" {
				position = { 5 45 }
				size = { 230 70 }
			}

			blockoverride "scrollbox_background" {

			}
			blockoverride "scrollbox_replace_vbox" {
				dynamicgridbox = {
					position = { 5 0 }
					block "data" {
						#datamodel = "[GetGlobalList('idle_general_list')]"
					}
					datamodel_wrap = 1
					flipdirection = yes
					ignoreinvisible = yes
					#direction = vertical
					#spacing = 2
					item = {
						flowcontainer = {
							direction = vertical
							alwaystransparent = no
							#datacontext = "[Scope.AccessCivilWars]"
							parentanchor = top|center
							block "item_visibility" {
								visible = "[Not( CivilWar.HasBrokenOut )]"
							}
							size = { 220 35 }
							spacing = 6
							onmousehierarchyenter = "[AccessHighlightManager.HighlightCivilWarCountry( CivilWar.Self )]"
							onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

							bad_progressbar_horizontal = {
								visible = "[CivilWar.IsSecession]"
								size = { 220 30 }
								tooltip = "SECESSION_PROGRESS_TOOLTIP"
			
								blockoverride "values" {
									value = "[FixedPointToFloat( CivilWar.GetProgress )]"
									min = 0
									max = 1
								}
			
								### secession header
								textbox = {
									text = "SECESSION_HEADER"
									tooltip = "SECESSION_HEADER_TOOLTIP"
									elide = right
									align = nobaseline
									autoresize = yes
									parentanchor = vcenter
									margin_left = 10
								}
			
								textbox = {
									text = "[CivilWar.GetProgress|%0v]"
									autoresize = yes
									align = nobaseline
									parentanchor = right|vcenter
									margin_right = 35
								}
			
								icon = {
									parentanchor = right|vcenter
									size = { 25 25 }
									texture = "gfx/interface/icons/war_goals/secession.dds"
									position = { -5 0 }
								}
							}
						}
					}
				}
			}
		}
		close_button = {
			name = "Close"
			size = { 35 35 }
			parentanchor = right|top
			position = { -5 5 }
			shortcut = "close_window"
			onclick = "[GetVariableSystem.Toggle('state_alert_var')]"
			block "onclick_close_button" {
				#onclick = "[GetScriptedGui('toggle_idle_general_list_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
			}
			block "onclose" {}
		}
	}
	# NOTE: Put all red custom alerts in this container
	type custom_alert_box_red = flowcontainer {
		visible = "[And(Not(GetVariableSystem.Exists('alert_toggle_menu')), Not(GetVariableSystem.Exists('state_alert_var')))]"
		# Market Shortage
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_market_shortage_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenMarketPanelTab( AccessPlayer.AccessFirstMarket, 'default' )]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('market_shortage_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('market_shortage_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/unused/supply_low.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_red
			}
			tooltip = "alert_market_shortage_alert_typhion_ui"
		}
		# Secession Growing
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_secession_growing_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[GetVariableSystem.SetOrToggle('state_alert_var', 'secession_growing')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('secession_growing_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('secession_growing_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/secession_growing.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_red
			}
			tooltip = "alert_secession_growing_alert_typhion_ui"
		}
		# Revolution is Coming
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_upcoming_revolt_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[GetVariableSystem.SetOrToggle('state_alert_var', 'revolution_brewing')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('upcoming_revolt_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('upcoming_revolt_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/politics_icons/revolution.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_red
			}
			tooltip = "alert_upcoming_revolt_alert_typhion_ui"
		}
		# Isolated State
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_isolated_state_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[GetVariableSystem.SetOrToggle('state_alert_var', 'isolated_states')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('isolated_state_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('isolated_state_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/generic_icons/market_isolated.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_red
			}
			tooltip = "alert_isolated_state_alert_typhion_ui"
		}
		# Target of Diplo Plays
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('is_in_diplo_play_loc'), 'yes')]"
			blockoverride "click" {
				#onclick = "[InformationPanelBar.OpenCountryPanelTab(GetPlayer.Self, 'diplomacy')]"
				onclick = "[GetVariableSystem.SetOrToggle('state_alert_var', 'diplo_play_target')]"
				#onclick = "[GetScriptedGui('toggle_diplo_play_target_list_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('diplo_play_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('diplo_play_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/unused/diplomatic_play.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_red
			}
			tooltip = "alert_is_in_diplo_play_alert_ui"
		}
		# Convoys Sunk
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_convoys_being_sunk_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('military', 'navy')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('has_convoys_being_sunk_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('has_convoys_being_sunk_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/unused/critical_supply_network.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_red
			}
			tooltip = "alert_has_convoys_being_sunk_alert_typhion_ui"
		}
		# Vulnerable Front
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('vulnerable_front_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('military', 'army')]"
				#onclick = "[GetVariableSystem.SetOrToggle('state_alert_var', 'vulnerable_front')]"
				#onclick = "[GetScriptedGui('toggle_vulnerable_front_list_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('vulnerable_front_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('vulnerable_front_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/vaulnarable_front.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_red
			}
			tooltip = "alert_vulnerable_front_alert_typhion_ui"
		}
		# High Attrition
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('high_attrition_loc'), 'yes')]"
			blockoverride "click" {
				#onclick = "[InformationPanelBar.OpenPanelTab('military', 'army')]"
				onclick = "[GetVariableSystem.SetOrToggle('state_alert_var', 'attrition_general')]"
				onclick = "[GetScriptedGui('toggle_attrition_general_list_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('high_attrition_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('high_attrition_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/high_attrition.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_red
			}
			tooltip = "alert_high_attrition_alert_typhion_ui"
		}
		# Low Legitimacy
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('low_legitimacy_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('politics', 'interest_groups')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('low_legitimacy_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('low_legitimacy_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/low_legitimacy.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_red
			}
			tooltip = "alert_low_legitimacy_alert_typhion_ui"
		}
		# Country Default
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('country_default_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('budget', 'assets')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('country_default_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('country_default_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/bankruptcy.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_red
			}
			tooltip = "alert_country_default_alert_typhion_ui"
		}
	}

	type custom_alert_box_yellow = flowcontainer {
		visible = "[And(Not(GetVariableSystem.Exists('alert_toggle_menu')), Not(GetVariableSystem.Exists('state_alert_var')))]"
		# Insufficient Tax
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_insufficient_tax_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[GetVariableSystem.SetOrToggle('state_alert_var', 'insufficient_tax')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('has_insufficient_tax_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('bad_tax_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/topbar/income_power_icon.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_insufficient_tax_alert_typhion_ui"
		}
		# Low Market Access
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_low_market_access_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[GetVariableSystem.SetOrToggle('state_alert_var', 'low_access')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('low_market_access_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('low_market_access_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/invention_icons/railways.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_low_market_access_alert_typhion_ui"
		}
		## Need Convoys Steamers
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('needs_convoys_steamers_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenMarketPanelTab( AccessPlayer.AccessFirstMarket, 'trade_routes' )]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('needs_convoys_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('need_convoys_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/goods_icons/steamers.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_need_convoys_alert_typhion_ui"
		}
		# Need Convoys
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('needs_convoys_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenMarketPanelTab( AccessPlayer.AccessFirstMarket, 'trade_routes' )]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('needs_convoys_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('need_convoys_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/clippers_darker.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_need_convoys_alert_typhion_ui"
		}
		# Construction Paused
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('is_construction_paused_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('production_methods', 'construction_queues')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('wasted_construction_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('wasted_construction_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/has_construction_paused_alert.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_is_construction_paused_alert_typhion_ui"
		}
		# Losing Rank
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('is_losing_rank_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanel('diplomatic_overview')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('losing_rank_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('losing_rank_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/is_losing_rank.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_is_losing_rank_alert_typhion_ui"
		}
		# No Research
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_no_research_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanel('tech_tree')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('has_no_research_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('no_research_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/has_no_research.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_has_no_research_alert_typhion_ui"
		}
		# Active Peace Deal
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('active_peace_deal_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanel('diplomatic_overview')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('active_peace_deal_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('active_peace_deal_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/active_peace_deal.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_active_peace_deal_alert_typhion_ui"
		}
		# No War Goal
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_no_war_goal_loc'), 'yes')]"
			blockoverride "click" {
				#onclick = "[InformationPanelBar.OpenPanel('diplomatic_overview')]"
				onclick = "[GetVariableSystem.SetOrToggle('state_alert_var', 'has_no_war_goal')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('has_no_war_goal_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('no_war_goal_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/has_no_war_goal.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_has_no_war_goal_alert_typhion_ui"
		}
		# Wasted Construction
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('wasted_construction_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('production_methods', 'construction_queues')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('wasted_construction_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('wasted_construction_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/wasted_construction.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_wasted_construction_alert_typhion_ui"
		}
		# Decreasing Interests
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_decreasing_interests_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanel('diplomatic_overview')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('decreasing_interests_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('decreasing_interests_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/has_decreasing_interests.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_has_decreasing_interests_alert_typhion_ui"
		}
		# Bureaucracy Shortage
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('country_approaching_bureaucracy_shortage_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('politics', 'institutions')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('bureaucracy_shortage_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('bureaucracy_shortage_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/bureaucracy_shortage.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_yellow
			}
			tooltip = "alert_country_approaching_bureaucracy_shortage_alert_typhion_ui"
		}
	}

	type custom_alert_box_green = flowcontainer {
		visible = "[And(Not(GetVariableSystem.Exists('alert_toggle_menu')), Not(GetVariableSystem.Exists('state_alert_var')))]"
		# Free Government Reform
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('free_government_reform_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('politics', 'interest_groups')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('government_reform_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('government_reform_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/reform_government.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_green.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_green
			}
			tooltip = "alert_free_government_reform_alert_typhion_ui"
		}
		# Navy in Reserve
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_navy_in_reserve_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('military', 'navy')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('navy_reserve_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('navy_reserve_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/has_navy_in_reserve.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_green.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_green
			}
			tooltip = "alert_navy_in_reserve_alert_typhion_ui"
		}
		# Army in Reserve
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_army_in_reserve_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('military', 'army')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('army_reserve_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('army_reserve_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/has_army_in_reserve.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_green.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_green
			}
			tooltip = "alert_army_in_reserve_alert_typhion_ui"
		}
		# Idle mobilized general
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_idle_general_loc'), 'yes')]"
			blockoverride "click" {
				#onclick = "[InformationPanelBar.OpenPanelTab('military', 'army')]"
				onclick = "[GetVariableSystem.SetOrToggle('state_alert_var', 'idle_general')]"
				onclick = "[GetScriptedGui('toggle_idle_general_list_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('idle_general_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('idle_gen_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/idle_mobilized_general.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_green.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_green
			}
			tooltip = "alert_idle_general_alert_typhion_ui"
		}
		# Unproductive Trade Routes
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_unproductive_trade_route_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenMarketPanelTab( AccessPlayer.AccessFirstMarket, 'trade_routes' )]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('unproductive_trade_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('unproductive_trade_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/market_over_capacity.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_green.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_green
			}
			tooltip = "alert_unproductive_trade_route_alert_typhion_ui"
		}
		# Stockpiling Gold
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('stockpiling_gold_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanelTab('budget', 'overview')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('stockpiling_gold_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('stockpiling_gold_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/goods_icons/gold.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_green.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_green
			}
			tooltip = "alert_stockpiling_gold_alert_typhion_ui"
		}
		# Unused Interests
		custom_alert = {
			visible = "[EqualTo_string(GetPlayer.GetCustom('has_unused_interests_loc'), 'yes')]"
			blockoverride "click" {
				onclick = "[InformationPanelBar.OpenPanel('diplomatic_overview')]"
				rightclick_modifiers = {
					ondefault = "[GetScriptedGui('unused_interests_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
					ondefault = "[GetVariableSystem.Toggle('decreasing_interests_toggle')]"
				}
			}
			blockoverride "alert_texture" {
				texture = "gfx/interface/icons/alert_icons/unused_interests.dds"
			}
			blockoverride "button_color" {
				texture = "gfx/interface/icons/alert_icons/alert_button_green.dds"
			}
			blockoverride "vfx_color" {
				entity_instance = vfx_entity_ui_alert_above_icon_green
			}
			tooltip = "alert_unused_interests_alert_typhion_ui"
		}
	}

	type custom_alert_box_decisions = dynamicgridbox {
		visible = "[And(Not(GetVariableSystem.Exists('alert_toggle_menu')), Not(GetVariableSystem.Exists('state_alert_var')))]"
		datamodel = "[AccessPlayer.GetDecisions]"
		#flipdirection = yes
		maximumsize = { 70 70 }
		datamodel_wrap = 1
		ignoreinvisible = yes
		alwaystransparent = yes
		scissor = yes
		# Available Decisions
		item = {
			custom_alert = {
				visible = "[And(And(IsValid(Decision.TakeDecision(GetPlayer)), Not(GetVariableSystem.Exists(Concatenate('decision_toggle_', Decision.GetTooltipTag)))), EqualTo_string(GetPlayer.GetCustom('available_decisions_loc'), 'yes'))]"
				blockoverride "click" {
					onclick = "[InformationPanelBar.OpenPanelTab('journal', 'decisions')]"
					rightclick_modifiers = {
						ondefault = "[GetScriptedGui('available_decisions_toggle_sgui').Execute( GuiScope.AddScope('player_credit',MakeScopeValue(GetPlayer.GetMaxCredit)).End )]"
						ondefault = "[GetVariableSystem.Toggle('available_decisions_toggle')]"
					}
				}
				blockoverride "alert_texture" {
					size = { 48 48 }
					texture = "gfx/interface/icons/lens_toolbar_icons/unused/grant_recognition.dds"
				}
				blockoverride "button_color" {
					texture = "gfx/interface/icons/alert_icons/alert_button_green.dds"
				}
				blockoverride "vfx_color" {
					entity_instance = vfx_entity_ui_alert_above_icon_green
				}
				tooltip = "alert_available_decision_alert_typhion_ui"
			}
		}
	}

	# NOTE: This type should have all the vanilla content of an alert button
	# If/when vanilla changes this should be changed too
	type custom_alert = widget {
		size = { 70 70 }
		using = tooltip_below
		button = {
			size = { 100% 100% }
			block "button_color" {
				# texture = "gfx/interface/icons/alert_icons/alert_button_yellow.dds"
				# texture = "gfx/interface/icons/alert_icons/alert_button_red.dds"
				# texture = "gfx/interface/icons/alert_icons/alert_button_green.dds"
			}
			effectname = "NoHighlight"
			using = current_situation_button_sound
			using = tooltip_below
			block "click"  {

			}
			### ALERT VFX - NEW
			vfx = {
				blockoverride "size" {
					size = { 400% 400% }
				}
				blockoverride "parent_anchor" {
					parentanchor = hcenter|vcenter
				}
				blockoverride "entity_instance" {
					entity_instance = vfx_entity_ui_alert_once_for_new
				}
			}

			### alert animation
			modify_texture = {
				name = "glow_loop"
				texture = "gfx/interface/icons/alert_icons/alert_animation.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
				rotate_uv = 0
				alpha = 0.8
			}

			state = {
				trigger_on_create = yes
				name = glow_loop1
				next = glow_loop2
				duration = 1.5

				modify_texture = {
					name = "glow_loop"
					rotate_uv = -22.5
				}
			}
			state = {
				name = glow_loop2
				next = glow_loop1
				duration = 0

				modify_texture = {
					name = "glow_loop"
					rotate_uv = 0
				}
			}

			### button states
			modify_texture = {
				name = "mouse_enter"
				texture = "gfx/interface/buttons/button_icons/icon_button_mouse_enter.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
				alpha = 0
				rotate_uv = 0
			}
			modify_texture = {
				name = "mouse_press"
				texture = "gfx/interface/buttons/default_button_mousepress.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
				alpha = 0
			}

			### show
			state = {
				name = _show
				on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('show')]"
				position = { 0 0 }
				using = button_animation_duration

				modify_texture = {
					name = mouse_press
					alpha = 0
				}
				modify_texture = {
					name = mouse_enter
					alpha = 0
					rotate_uv = 0
				}
			}

			### enter
			state = {
				name = _mouse_enter
				on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('enter')]"
				position = { 0 0 }
				using = button_animation_duration

				modify_texture = {
					name = mouse_press
					alpha = 0
				}
				modify_texture = {
					name = mouse_enter
					alpha = 1
					rotate_uv = 180
				}
			}

			### leave
			state = {
				name = _mouse_leave
				on_start = "[PdxGuiWidget.AccessChild('icon').InterruptThenTriggerAnimation('enter','leave')]"
				position = { 0 0 }
				using = button_animation_duration

				modify_texture = {
					name = mouse_press
					alpha = 0
				}
				modify_texture = {
					name = mouse_enter
					alpha = 0
					rotate_uv = 0
				}
			}

			### press
			state = {
				name = _mouse_press
				on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('press')]"
				position = { 1 2 }
				using = button_animation_duration

				modify_texture = {
					name = mouse_press
					alpha = 1
				}
				modify_texture = {
					name = mouse_enter
					alpha = 0
					rotate_uv = 0
				}
			}

			### release
			state = {
				name = _mouse_release
				on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('release')]"
				position = { 0 0 }
				using = button_animation_duration

				modify_texture = {
					name = mouse_press
					alpha = 0
				}
				modify_texture = {
					name = mouse_enter
					alpha = 0
					rotate_uv = 0
				}
			}

			### ALERT ICON INSIDE THE BUTTON
			icon = {
				name = icon
				parentanchor = center
				size = { 55 55 }
				block "alert_texture" {
					#texture = "[Alert.GetTexture]"
				}

				### button states
				modify_texture = {
					name = "mouse_enter"
					texture = "gfx/interface/buttons/button_icons/icon_button_mouse_enter.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
					alpha = 0
					rotate_uv = 0
				}
				modify_texture = {
					name = "mouse_press"
					texture = "gfx/interface/buttons/default_button_mousepress.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
					alpha = 0
				}

				scale = 1

				### show
				state = {
					name = show
					position = { 0 0 }
					using = button_animation_duration
					scale = 1

					modify_texture = {
						name = mouse_press
						alpha = 0
					}
					modify_texture = {
						name = mouse_enter
						alpha = 0
						rotate_uv = 0
					}
				}

				### enter
				state = {
					name = enter
					position = { 0 0 }
					using = button_animation_duration
					scale = 1.1

					modify_texture = {
						name = mouse_press
						alpha = 0
					}
					modify_texture = {
						name = mouse_enter
						alpha = 1
						rotate_uv = 180
					}
				}

				### leave
				state = {
					name = leave
					position = { 0 0 }
					using = button_animation_duration
					scale = 1

					modify_texture = {
						name = mouse_press
						alpha = 0
					}
					modify_texture = {
						name = mouse_enter
						alpha = 0
						rotate_uv = 0
					}
				}

				### press
				state = {
					name = press
					position = { 1 2 }
					using = button_animation_duration
					scale = 1.1

					modify_texture = {
						name = mouse_press
						alpha = 1
					}
					modify_texture = {
						name = mouse_enter
						alpha = 0
						rotate_uv = 0
					}
				}

				### release
				state = {
					name = release
					position = { 0 0 }
					using = button_animation_duration
					scale = 1.1

					modify_texture = {
						name = mouse_press
						alpha = 0
					}
					modify_texture = {
						name = mouse_enter
						alpha = 0
						rotate_uv = 0
					}
				}
			}

			### ALERT VFX - IDLE
			vfx = {
				blockoverride "size" {
					size = { 400% 400% }
				}
				blockoverride "parent_anchor" {
					parentanchor = hcenter|vcenter
				}
				blockoverride "entity_instance" {
					block "vfx_color" {
						# entity_instance = vfx_entity_ui_alert_above_icon_yellow
						# entity_instance = vfx_entity_ui_alert_above_icon_red
						# entity_instance = vfx_entity_ui_alert_above_icon_green

					}
				}
			}
		}
	}
}
